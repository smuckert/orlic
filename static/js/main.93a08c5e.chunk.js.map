{"version":3,"sources":["components/api/index.js","components/case/index.js","components/image-with-text/index.js","components/coming-soon/index.js","App/main/index.js","App.js","serviceWorker.js","index.js"],"names":["Client","Prismic","client","accessToken","Case","caseData","textColor","data","media","case_title","text","url","link","description","case_text","href","target","rel","className","name","endsWith","src","autoPlay","muted","playsInline","loop","alt","style","color","RichText","render","ImageWithText","imageWithTextData","bgColor","background_color","text_color","image","title","description_text","background","boxShadow","ComingSoon","Main","useState","setHeroData","setHeaderData","setCaseData","setImageWithTextData","setFooterData","showcaseData","setShowcaseData","useEffect","a","async","query","Predicates","at","response","results","fetchData","length","showcase_title","container_background_color","hide","map","t","i","key","undefined","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93a08c5e.chunk.js","sourcesContent":["import Prismic from 'prismic-javascript';\r\n\r\nconst apiEndpoint = 'https://orlic.cdn.prismic.io/api/v2';\r\nconst accessToken = 'MC5YZmluWkJFQUFDSUFGQnE3.77-9bu-_ve-_ve-_ve-_ve-_vRzvv73vv70AETDvv713H--_vSzvv70T77-9GSfvv73vv71DEBvvv70hfO-_vQ';\r\n \r\nexport const Client = Prismic.client(apiEndpoint, { accessToken });","import React from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst Case = ({ caseData, textColor }) => {\r\n  const data = caseData.data;\r\n  const title = data.case_title[0].text;\r\n  const media = data.media.url;\r\n  const link = data.link;\r\n  const description = data.case_text;\r\n\r\n  return (\r\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"case\" >\r\n      <div className=\"media-wrapper\">\r\n        {data.media.name.endsWith('mp4') ? (\r\n          <video src={media} autoPlay muted playsInline loop />\r\n          ) : (\r\n          <img src={media} alt=\"case\" />\r\n        )}\r\n      </div>\r\n      <div className=\"description\" style={{ color: textColor }}>\r\n        {RichText.render(description)} \r\n      </div>\r\n    </a>\r\n  )\r\n}\r\n\r\nexport default Case;","import React from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst ImageWithText = ({ imageWithTextData }) => {\r\n  const data = imageWithTextData.data;\r\n  const bgColor = data.background_color;\r\n  const textColor = data.text_color;\r\n  const image = data.image.url;\r\n  const title = data.title[0].text;\r\n  const description = data.description_text;\r\n  \r\n  return (\r\n    <div className=\"image-with-text\" style={{ background: bgColor, color: textColor }}>\r\n      <img src={image} alt=\"showcase image\"  style={{ boxShadow: `10px 11px 0px 1px ${textColor}` }} />\r\n      <div className=\"headline-wrapper\">\r\n        <h2>{title}</h2>\r\n        {RichText.render(description)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageWithText;","import React from 'react';\r\n\r\nimport './index.scss';\r\n\r\nconst ComingSoon = () => {\r\n  return (\r\n    <div className=\"coming-soon\">\r\n      <h1>David Orlic</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ComingSoon;","import React, { useEffect, useState } from 'react';\r\nimport Prismic from 'prismic-javascript';\r\nimport { Client } from '../../components/api';\r\n\r\nimport Hero from '../../components/hero';\r\nimport Header from '../../components/header';\r\nimport Case from '../../components/case';\r\nimport ImageWithText from '../../components/image-with-text';\r\nimport Footer from '../../components/footer';\r\nimport ComingSoon from '../../components/coming-soon';\r\n\r\nimport './index.scss';\r\n\r\nconst Main = () => {\r\n  const [heroData, setHeroData] = useState([]);\r\n  const [headerData, setHeaderData] = useState([]);\r\n  const [caseData, setCaseData] = useState([]);\r\n  const [imageWithTextData, setImageWithTextData] = useState([]);\r\n  const [footerData, setFooterData] = useState([]);\r\n  const [showcaseData, setShowcaseData] = useState([]);\r\n    \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'hero_component')\r\n      )\r\n\r\n      if (response) {\r\n        setHeroData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'header_component')\r\n      )\r\n\r\n      if (response) {\r\n        setHeaderData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'case_component')\r\n      )\r\n\r\n      if (response) {\r\n        setCaseData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'imagewithtext_component')\r\n      )\r\n\r\n      if (response) {\r\n        setImageWithTextData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'footer_component')\r\n      )\r\n\r\n      if (response) {\r\n        setFooterData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'showcase')\r\n      )\r\n\r\n      if (response) {\r\n        setShowcaseData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  let renderCases;\r\n  let renderImageWithText;\r\n  let showcaseTitle;\r\n  let bgColor;\r\n  let textColor;\r\n  let hide;\r\n\r\n  if (showcaseData.length > 0) {\r\n    showcaseTitle = showcaseData[0].data.showcase_title[0].text;\r\n    bgColor = showcaseData[0].data.container_background_color;\r\n    textColor = showcaseData[0].data.text_color;\r\n    hide = showcaseData[0].data.hide;\r\n  }\r\n\r\n  if (caseData.length > 0) {\r\n    renderCases = caseData.map((t, i) => {\r\n      return (\r\n        <Case key={t + i} caseData={t} textColor={textColor ? textColor : undefined} />\r\n      )\r\n    });\r\n  }\r\n\r\n  if (imageWithTextData.length > 0) {\r\n    renderImageWithText = imageWithTextData.map((t, i) => {\r\n      return (\r\n        <ImageWithText key={t + i} imageWithTextData={t} /> \r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <ComingSoon />\r\n      {/* <Header headerData={headerData} />\r\n      <Hero heroData={heroData} />\r\n      <div className=\"content-container\">\r\n        <div className=\"showcase\" style={{ display: `${hide === 'true' ? 'none' : 'block'}`, background: bgColor, color: textColor }}>\r\n          <h2>{showcaseTitle}</h2>\r\n          <div className=\"case-wrapper\">\r\n            {renderCases}\r\n          </div>\r\n        </div>\r\n        {renderImageWithText}\r\n      </div>\r\n      <Footer footerData={footerData} /> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport '../src/styles/theme.scss';\r\n\r\nimport Main from '../src/App/main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}