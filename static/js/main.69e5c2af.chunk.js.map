{"version":3,"sources":["components/api/index.js","components/hero/index.js","components/header/index.js","components/case/index.js","components/image-with-text/index.js","components/footer/index.js","App/main/index.js","App.js","serviceWorker.js","index.js"],"names":["Client","Prismic","client","accessToken","Hero","data","textColor","contactPhone","contactMail","heroData","text","video","length","hero_text","background_video","url","contact","text_color","info","className","src","autoPlay","muted","playsInline","loop","style","color","RichText","render","href","Header","logo","iconColor","whatsappLink","linkedinLink","headerData","icon_color","links","link_item","alt","rel","target","icon","faWhatsapp","faLinkedin","Case","caseData","media","case_title","link","description","case_text","name","endsWith","ImageWithText","imageWithTextData","bgColor","background_color","image","title","description_text","background","boxShadow","window","innerWidth","Footer","footerContent","renderColumns","backgroundColor","mediumLink","twitterLink","footerData","footerRef","useRef","footer_content","footer_links","map","t","i","key","text_column","useEffect","elems","current","querySelectorAll","ref","Main","renderCases","renderImageWithText","showcaseTitle","hide","useState","setHeroData","setHeaderData","setCaseData","setImageWithTextData","setFooterData","showcaseData","setShowcaseData","a","async","query","Predicates","at","response","results","fetchData","orderings","showcase_title","container_background_color","undefined","display","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69e5c2af.chunk.js","sourcesContent":["import Prismic from 'prismic-javascript';\r\n\r\nconst apiEndpoint = 'https://orlic.cdn.prismic.io/api/v2';\r\nconst accessToken = 'MC5YZmluWkJFQUFDSUFGQnE3.77-9bu-_ve-_ve-_ve-_ve-_vRzvv73vv70AETDvv713H--_vSzvv70T77-9GSfvv73vv71DEBvvv70hfO-_vQ';\r\n \r\nexport const Client = Prismic.client(apiEndpoint, { accessToken });","import React from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst Hero = ({ heroData }) => {\r\n  let data;\r\n  let text = [];\r\n  let video = '';\r\n  let contact = [];\r\n  let textColor;\r\n  let contactPhone;\r\n  let contactMail;\r\n\r\n  if (heroData.length > 0) {\r\n    data = heroData[0].data;\r\n    text = data.hero_text;\r\n    video = data.background_video.url;\r\n    contact = data.contact;\r\n    textColor = data.text_color;\r\n    contactPhone = data.contact[0].info;\r\n    contactMail = data.contact[1].info;\r\n  }\r\n\r\n  return (\r\n    <div className=\"hero\">\r\n      <video src={video} autoPlay muted playsInline loop />\r\n      <div className=\"text-wrapper\">\r\n        <div className=\"text\" style={{ color: textColor }}>\r\n          {RichText.render(text)}\r\n        </div>\r\n        <div className=\"contact\">\r\n          <p className=\"contact-item\" style={{ color: textColor }}>{contactPhone}</p>\r\n          <a className=\"contact-item\" href={`mailto:${contactMail}`} style={{ color: textColor }}><p>{contactMail}</p></a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Hero;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLinkedin, faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport './index.scss';\r\n\r\nconst Header = ({ headerData }) => {\r\n  let data;\r\n  let logo;\r\n  let iconColor;\r\n  let whatsappLink;\r\n  let linkedinLink;\r\n\r\n  if (headerData.length > 0) {\r\n    data = headerData[0].data;\r\n    logo = data.logo.url;\r\n    iconColor = data.icon_color;\r\n    whatsappLink = data.links[0].link_item;\r\n    linkedinLink = data.links[1].link_item;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"header\">\r\n      {logo &&\r\n        <img className=\"logo\" src={logo} alt=\"logo\" />\r\n      }\r\n      <div className=\"icons\">\r\n        <a href={whatsappLink} rel=\"noopener noreferrer\" target=\"_blank\" >\r\n          <FontAwesomeIcon color={iconColor} icon={faWhatsapp}></FontAwesomeIcon>\r\n        </a>\r\n        {/* <a href=\"https://www.twitter.com\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n          <FontAwesomeIcon icon={faTwitter}></FontAwesomeIcon>\r\n        </a> */}\r\n        <a href={linkedinLink} rel=\"noopener noreferrer\" target=\"_blank\">\r\n          <FontAwesomeIcon color={iconColor} icon={faLinkedin}></FontAwesomeIcon>\r\n        </a>  \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst Case = ({ caseData, textColor }) => {\r\n  const data = caseData.data;\r\n  const title = data.case_title[0].text;\r\n  const media = data.media.url;\r\n  const link = data.link;\r\n  const description = data.case_text;\r\n\r\n  return (\r\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"case\" >\r\n      <div className=\"media-wrapper\">\r\n        {data.media.name.endsWith('mp4') ? (\r\n          <video src={media} autoPlay muted playsInline loop />\r\n          ) : (\r\n          <img src={media} alt=\"case\" />\r\n        )}\r\n      </div>\r\n      <div className=\"description\" style={{ color: textColor }}>\r\n        {RichText.render(description)} \r\n      </div>\r\n    </a>\r\n  )\r\n}\r\n\r\nexport default Case;","import React from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst ImageWithText = ({ imageWithTextData }) => {\r\n  const data = imageWithTextData.data;\r\n  const bgColor = data.background_color;\r\n  const textColor = data.text_color;\r\n  const image = data.image.url;\r\n  const title = data.title[0].text;\r\n  const description = data.description_text;\r\n  \r\n  return (\r\n    <div className=\"image-with-text\" style={{ background: bgColor, color: textColor }}>\r\n      <img src={image} alt=\"showcase image\"  style={{ boxShadow: window.innerWidth <= 420 ? `5px 5px 0px 1px ${textColor}` : `10px 11px 0px 1px ${textColor}` }} />\r\n      <div className=\"headline-wrapper\">\r\n        <h2>{title}</h2>\r\n        {RichText.render(description)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageWithText;","import React, { useRef, useEffect } from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst Footer = ({ footerData }) => {\r\n  let data;\r\n  let title;\r\n  let footerContent;\r\n  let renderColumns;\r\n  let backgroundColor;\r\n  let textColor;\r\n  let mediumLink;\r\n  let twitterLink;\r\n  let linkedinLink;\r\n  const footerRef = useRef(null);\r\n\r\n  if (footerData.length > 0) {\r\n    data = footerData[0].data;\r\n    title = data.title[0].text;\r\n    footerContent = data.footer_content;\r\n    backgroundColor = data.background_color;\r\n    textColor = data.text_color;\r\n    twitterLink = data.footer_links[0].link_item;\r\n    mediumLink = data.footer_links[1].link_item;\r\n    linkedinLink = data.footer_links[2].link_item;\r\n\r\n    renderColumns = footerContent.map((t, i) => {\r\n      return (\r\n        <div className=\"column\" key={t + i} style={{ color: textColor }}>\r\n          {RichText.render(t.text_column)}\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    let elems = footerRef.current.querySelectorAll('a');\r\n\r\n    if (elems) {\r\n      for (var i = 0; i < elems.length; i++) {\r\n        elems[i].style.color = textColor;\r\n      }\r\n    }\r\n\r\n  }, [footerData])\r\n  \r\n  return (\r\n    <div className=\"footer\" style={{ color: textColor, background: backgroundColor }} ref={footerRef}>\r\n      <h2>{title}</h2>\r\n      <div className=\"column-wrapper\">\r\n        {renderColumns}\r\n        <div className=\"column\">\r\n          {/* <p>Connect</p> */}\r\n          <p>\r\n            <a href={twitterLink} target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: textColor }}>Twitter</a>\r\n          </p>\r\n          <p>\r\n            <a href={mediumLink} target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: textColor }}>Medium</a>\r\n          </p>\r\n          <p>\r\n            <a href={linkedinLink} target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: textColor }}>LinkedIn</a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { useEffect, useState } from 'react';\r\nimport Prismic from 'prismic-javascript';\r\nimport { Client } from '../../components/api';\r\n\r\nimport Hero from '../../components/hero';\r\nimport Header from '../../components/header';\r\nimport Case from '../../components/case';\r\nimport ImageWithText from '../../components/image-with-text';\r\nimport Footer from '../../components/footer';\r\nimport ComingSoon from '../../components/coming-soon';\r\n\r\nimport './index.scss';\r\n\r\nconst Main = () => {\r\n  const [heroData, setHeroData] = useState([]);\r\n  const [headerData, setHeaderData] = useState([]);\r\n  const [caseData, setCaseData] = useState([]);\r\n  const [imageWithTextData, setImageWithTextData] = useState([]);\r\n  const [footerData, setFooterData] = useState([]);\r\n  const [showcaseData, setShowcaseData] = useState([]);\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n    \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'hero_component')\r\n      )\r\n\r\n      if (response) {\r\n        setHeroData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'header_component')\r\n      )\r\n\r\n      if (response) {\r\n        setHeaderData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'case_component'),\r\n        { orderings : '[document.last_publication_date desc]' }\r\n      )\r\n\r\n      if (response) {\r\n        setCaseData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'imagewithtext_component')\r\n      )\r\n\r\n      if (response) {\r\n        setImageWithTextData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'footer_component')\r\n      )\r\n\r\n      if (response) {\r\n        setFooterData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'showcase')\r\n      )\r\n\r\n      if (response) {\r\n        setShowcaseData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  let renderCases;\r\n  let renderImageWithText;\r\n  let showcaseTitle;\r\n  let bgColor;\r\n  let textColor;\r\n  let hide;\r\n\r\n  if (showcaseData.length > 0) {\r\n    showcaseTitle = showcaseData[0].data.showcase_title[0].text;\r\n    bgColor = showcaseData[0].data.container_background_color;\r\n    textColor = showcaseData[0].data.text_color;\r\n    hide = showcaseData[0].data.hide;\r\n  }\r\n\r\n  if (caseData.length > 0) {\r\n    renderCases = caseData.map((t, i) => {\r\n      return (\r\n        <Case key={t + i} caseData={t} textColor={textColor ? textColor : undefined} />\r\n      )\r\n    });\r\n  }\r\n\r\n  if (imageWithTextData.length > 0) {\r\n    renderImageWithText = imageWithTextData.map((t, i) => {\r\n      return (\r\n        <ImageWithText key={t + i} imageWithTextData={t} /> \r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      {/* {username === 'orlic' && password === 'cilrocilrocilro' ? \r\n      (\r\n        <>\r\n          <Header headerData={headerData} />\r\n          <Hero heroData={heroData} />\r\n          <div className=\"content-container\">\r\n            <div className=\"showcase\" style={{ display: `${hide === 'true' ? 'none' : 'block'}`, background: bgColor, color: textColor }}>\r\n              <h2>{showcaseTitle}</h2>\r\n              <div className=\"case-wrapper\">\r\n                {renderCases}\r\n              </div>\r\n            </div>\r\n            {renderImageWithText}\r\n          </div>\r\n          <Footer footerData={footerData} />\r\n        </>\r\n      ) : (\r\n        <ComingSoon setUsername={setUsername} setPassword={setPassword} />\r\n      )\r\n    } */}\r\n      <Header headerData={headerData} />\r\n      <Hero heroData={heroData} />\r\n      <div className=\"content-container\">\r\n        <div className=\"showcase\" style={{ display: `${hide === 'true' ? 'none' : 'block'}`, background: bgColor, color: textColor }}>\r\n          <h2>{showcaseTitle}</h2>\r\n          <div className=\"case-wrapper\">\r\n            {renderCases}\r\n          </div>\r\n        </div>\r\n        {renderImageWithText}\r\n      </div>\r\n      <Footer footerData={footerData} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport '../src/styles/theme.scss';\r\n\r\nimport Main from '../src/App/main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}