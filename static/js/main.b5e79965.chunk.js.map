{"version":3,"sources":["components/api/index.js","components/hero/index.js","components/header/index.js","components/case/index.js","components/image-with-text/index.js","components/footer/index.js","App/main/index.js","App.js","serviceWorker.js","index.js"],"names":["Client","Prismic","client","accessToken","Hero","data","contactPhone","contactMail","heroData","text","video","length","hero_text","background_video","url","contact","info","className","src","autoPlay","muted","playsInline","loop","RichText","render","href","Header","headerData","logo","alt","rel","target","icon","faTwitter","faLinkedin","Case","caseData","title","case_title","media","link","name","endsWith","ImageWithText","imageWithTextData","bgColor","background_color","textColor","text_color","image","description","description_text","console","log","style","background","color","Footer","renderColumns","footerData","footer_content","map","t","i","key","text_column","Main","renderCases","renderImageWithText","showcaseTitle","useState","setHeroData","setHeaderData","setCaseData","setImageWithTextData","setFooterData","showcaseData","setShowcaseData","useEffect","a","async","query","Predicates","at","response","results","fetchData","showcase_title","container_background_color","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5e79965.chunk.js","sourcesContent":["import Prismic from 'prismic-javascript';\r\n\r\nconst apiEndpoint = 'https://orlic.cdn.prismic.io/api/v2';\r\nconst accessToken = 'MC5YZmluWkJFQUFDSUFGQnE3.77-9bu-_ve-_ve-_ve-_ve-_vRzvv73vv70AETDvv713H--_vSzvv70T77-9GSfvv73vv71DEBvvv70hfO-_vQ';\r\n \r\nexport const Client = Prismic.client(apiEndpoint, { accessToken });","import React from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst Hero = ({ heroData }) => {\r\n  let data;\r\n  let text = [];\r\n  let video = '';\r\n  let contact = [];\r\n  let contactPhone;\r\n  let contactMail;\r\n\r\n  if (heroData.length > 0) {\r\n    data = heroData[0].data;\r\n    text = data.hero_text;\r\n    video = data.background_video.url;\r\n    contact = data.contact;\r\n    contactPhone = data.contact[0].info;\r\n    contactMail = data.contact[1].info;\r\n  }\r\n\r\n  return (\r\n    <div className=\"hero\">\r\n      <video src={video} autoPlay muted playsInline loop />\r\n      <div className=\"text-wrapper\">\r\n        <div className=\"text\">\r\n          {RichText.render(text)}\r\n        </div>\r\n        <div className=\"contact\">\r\n          <p className=\"contact-item\">{contactPhone}</p>\r\n          <a className=\"contact-item\" href={`mailto:${contactMail}`}><p>{contactMail}</p></a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Hero;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faLinkedin } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport './index.scss';\r\n\r\nconst Header = ({ headerData }) => {\r\n  let data;\r\n  let logo = '';\r\n\r\n  if (headerData.length > 0) {\r\n    data = headerData[0].data;\r\n    logo = data.logo.url;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"header\">\r\n      <img className=\"logo\" src={logo} alt=\"logo\" />\r\n      <div className=\"icons\">\r\n        {/* <a href=\"https://www.twitter.com\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n          <FontAwesomeIcon icon={faTwitter}></FontAwesomeIcon>\r\n        </a> */}\r\n        <a href=\"https://www.twitter.com\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n          <FontAwesomeIcon icon={faTwitter}></FontAwesomeIcon>\r\n        </a>\r\n        <a href=\"https://www.linkedin.com\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n          <FontAwesomeIcon icon={faLinkedin}></FontAwesomeIcon>\r\n        </a>  \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './index.scss';\r\n\r\nconst Case = ({ caseData }) => {\r\n  const data = caseData.data;\r\n  const title = data.case_title[0].text;\r\n  const media = data.media.url;\r\n  const link = data.link;\r\n\r\n  return (\r\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"case\">\r\n      <div className=\"media-wrapper\">\r\n        {data.media.name.endsWith('mp4') ? (\r\n          <video src={media} autoPlay muted playsInline loop />\r\n          ) : (\r\n          <img src={media} alt=\"case\" />\r\n        )}\r\n      </div>      \r\n      <h3>{title}</h3>\r\n    </a>\r\n  )\r\n}\r\n\r\nexport default Case;","import React from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst ImageWithText = ({ imageWithTextData }) => {\r\n  const data = imageWithTextData.data;\r\n  const bgColor = data.background_color;\r\n  const textColor = data.text_color;\r\n  const image = data.image.url;\r\n  const title = data.title[0].text;\r\n  const description = data.description_text;\r\n\r\n  console.log(textColor);\r\n  \r\n  return (\r\n    <div className=\"image-with-text\" style={{ background: bgColor, color: textColor }}>\r\n      <img src={image} alt=\"showcase image\" />\r\n      <div className=\"headline-wrapper\">\r\n        <h2>{title}</h2>\r\n        {RichText.render(description)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageWithText;","import React from 'react';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\nimport './index.scss';\r\n\r\nconst Footer = ({ footerData }) => {\r\n  let data;\r\n  let title;\r\n  let footerContent;\r\n  let renderColumns;\r\n\r\n  if (footerData.length > 0) {\r\n    data = footerData[0].data;\r\n    title = data.title[0].text;\r\n    footerContent = data.footer_content;\r\n\r\n    renderColumns = footerContent.map((t, i) => {\r\n      return (\r\n        <div className=\"column\" key={t + i}>\r\n          {RichText.render(t.text_column)}\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div className=\"footer\">\r\n      <h2>{title}</h2>\r\n      <div className=\"column-wrapper\">\r\n        {renderColumns}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { useEffect, useState } from 'react';\r\nimport Prismic from 'prismic-javascript';\r\nimport { Client } from '../../components/api';\r\n\r\nimport Hero from '../../components/hero';\r\nimport Header from '../../components/header';\r\nimport Case from '../../components/case';\r\nimport ImageWithText from '../../components/image-with-text';\r\nimport Footer from '../../components/footer';\r\n\r\nimport './index.scss';\r\n\r\nconst Main = () => {\r\n  const [heroData, setHeroData] = useState([]);\r\n  const [headerData, setHeaderData] = useState([]);\r\n  const [caseData, setCaseData] = useState([]);\r\n  const [imageWithTextData, setImageWithTextData] = useState([]);\r\n  const [footerData, setFooterData] = useState([]);\r\n  const [showcaseData, setShowcaseData] = useState([]);\r\n    \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'hero_component')\r\n      )\r\n\r\n      if (response) {\r\n        setHeroData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'header_component')\r\n      )\r\n\r\n      if (response) {\r\n        setHeaderData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'case_component')\r\n      )\r\n\r\n      if (response) {\r\n        setCaseData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'imagewithtext_component')\r\n      )\r\n\r\n      if (response) {\r\n        setImageWithTextData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'footer_component')\r\n      )\r\n\r\n      if (response) {\r\n        setFooterData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await Client.query(\r\n        Prismic.Predicates.at('document.type', 'showcase')\r\n      )\r\n\r\n      if (response) {\r\n        setShowcaseData(response.results);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  let renderCases;\r\n  let renderImageWithText;\r\n  let showcaseTitle;\r\n  let bgColor;\r\n\r\n  if (caseData.length > 0) {\r\n    renderCases = caseData.map((t, i) => {\r\n      return (\r\n        <Case key={t + i} caseData={t} />\r\n      )\r\n    });\r\n  }\r\n\r\n  if (imageWithTextData.length > 0) {\r\n    renderImageWithText = imageWithTextData.map((t, i) => {\r\n      return (\r\n        <ImageWithText key={t + i} imageWithTextData={t} /> \r\n      )\r\n    })\r\n  }\r\n\r\n  if (showcaseData.length > 0) {\r\n    showcaseTitle = showcaseData[0].data.showcase_title[0].text;\r\n    bgColor = showcaseData[0].data.container_background_color;\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header headerData={headerData} />\r\n      <Hero heroData={heroData} />\r\n      <div className=\"content-container\">\r\n        <div className=\"showcase\" style={{ background: bgColor }}>\r\n          <h2>{showcaseTitle}</h2>\r\n          <div className=\"case-wrapper\">\r\n            {renderCases}\r\n          </div>\r\n        </div>\r\n        {renderImageWithText}\r\n      </div>\r\n      <Footer footerData={footerData} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport '../src/assets/theme.scss';\r\n\r\nimport Main from '../src/App/main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}